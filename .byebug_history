c
cc
c
cc
c
n
self
n
sn
s
possible_moves
self
s
board[possible_pos]
s
ss
s
board[move]
s
our_king
space
s[ace
in_bound_moves
s
board[[2, 0]].color
board[[2, 0]]
in_bound_moves
im_bound_moves
s
ss
s
possible_moves
s
in_bound_moves
s
in_bound_moves
s
our_king.pos
space
our_king
s
space
s
possible_moves
s
board[[0, 0]]
board[0, 0]
@pos
move
s
p i
s
n
print i
p i
board[pos[0] - i, pos[1]]
board[pos]
possible_moves
@pos
n
possible_moves
@pos
n
self
n
@pos
board.nil?
possible_moves
n
self
c
self
sle
c
self
c
self
c
self
c
n
self
c
self
c
self
c
self
slef
c
self
c
n
space
n
self
n
space
n
space
s
@pos
self.type
possible_moves
n
s
board[possible_pos]
possible_moves
self.type
board[possible_pos]
possible_pos
board.nil?
s
pos
s
@color
move
board.nil?
s
possible_pos
s
@pos
board.nil?
s
possible_moves
valid_moves
possible_moves
possible_pos
n
s
self
s
board.nil?
s
possible_moves
s
n
s
possible_moves
n
s
possible_pos
p i
i 
n
p i
n
p i
n
board.nil?
s
possible_moves
board.nil?
possible_pos
s
possible_moves
s
possible_moves
s
can_move_to?(board, possible_pos)
board[possible_pos]
possible_moves
possible_pos
s
self.type
@move_dirs
s
p i
s
pos
s
board[possible_pos].is_a?(NullPiece)
board[possible_move].is_a?(NullPiece)
possible_moves
s
pos
s
pos
s
can_move_to?(board, possible_pos)
board[[5, 3]]
possible_pos
possible_moves
s
@pos
s
p i
print i
board.nil?
possible_moves
s
possible_moves
s
possible_moves
s
pos
s
board[move].color
board[move]
board.nil?
s
board[possible_pos]
board.nil?
possible_pos
s
possible_pos
s
prc.call(i)
p i
i
s
board
exit
